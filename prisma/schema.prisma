generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Profile {
//   id     Int    @id @default(autoincrement())

//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  password         String?
  email            String?        @unique
  username         String?        @unique
  bio              String?
  dateOfBirth      DateTime?
  role             Role           @default(USER)
  image            String?
  accounts         Account[]
  Comment          Comment[]
  CommentVote      CommentVote[]
  Post             Post[]
  createdCommunity Community[]    @relation("CreatedBy")
  subscriptions    Subscription[]
  votes            Vote[]
  rule             Rule[]
  Session          Session[]
  Blog             Blog[]
  Tag              Tag[]
}

model Community {
  id           String         @id @default(cuid())
  slug         String?
  name         String         @unique
  title        String?
  description  String?
  profileImage String?
  coverImage   String?
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  creatorId    String
  posts        Post[]
  creator      User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers  Subscription[]
  rule         Rule[]

  @@index([name])
}

model Subscription {
  name        String?   @unique
  userId      String
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  slug        String?
  title       String
  content     String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  communityId String
  votes       Vote[]
  comments    Comment[]
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])
}

model Rule {
  id          String    @id @default(cuid())
  title       String
  description String
  authorId    String
  communityId String
  author      User      @relation(fields: [authorId], references: [id])
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  authorId  String
  postId    String
  replyToId String?
  commentId String?
  author    User          @relation(fields: [authorId], references: [id])
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

enum Role {
  ADMIN
  USER
}

enum VoteType {
  UP
  DOWN
}

model Blog {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  slug       String?  @unique
  title      String
  content    String
  coverImage String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  tags       Tag[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  slug      String?  @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  name      String   @unique
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}
