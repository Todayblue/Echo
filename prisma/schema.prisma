generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  username            String?        @unique
  role                Role           @default(USER)
  image               String?
  accounts            Account[]
  Comment             Comment[]
  CommentVote         CommentVote[]
  Post                Post[]
  Profile             Profile?
  createdSubCommunity SubCommunity[] @relation("CreatedBy")
  subscriptions       Subscription[]
  votes               Vote[]
}

model SubCommunity {
  id          String         @id @default(cuid())
  slug        String?
  name        String         @unique
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt
  creatorId   String?
  posts       Post[]
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  name           String?      @unique
  userId         String
  subCommunityId String
  subCommunity   SubCommunity @relation(fields: [subCommunityId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, subCommunityId])
}

model Post {
  id             String       @id @default(cuid())
  slug           String?
  title          String
  content        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authorId       String
  subCommunityId String
  comments       Comment[]
  author         User         @relation(fields: [authorId], references: [id])
  subCommunity   SubCommunity @relation(fields: [subCommunityId], references: [id], onDelete: Cascade)
  votes          Vote[]
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  authorId  String
  postId    String
  replyToId String?
  commentId String?
  author    User          @relation(fields: [authorId], references: [id])
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

enum Role {
  ADMIN
  USER
}

enum VoteType {
  UP
  DOWN
}
